/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Bourdoux.Team;

import com.sun.xml.internal.bind.v2.runtime.output.SAXOutput;
import com.sun.xml.internal.bind.v2.schemagen.Util;
import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.*;
import java.util.Base64;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author sjw
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form TextEditorFrame
     */
    public Editor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        statusField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               loadButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        statusField.setEditable(false);

        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(newButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(saveButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(loadButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(quitButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(statusField)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newButton)
                                        .addComponent(saveButton)
                                        .addComponent(loadButton)
                                        .addComponent(quitButton)
                                        .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        textArea.setText("");
        statusField.setText("New file");
    }//GEN-LAST:event_newButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        String[] option = new String[] {"Cipher" , "autenticate" , "both" , "cancel"};
        Chypher_Functions cf = new Chypher_Functions();
        int response = JOptionPane.showOptionDialog(null , "Choose a option please" , "Save Options" , JOptionPane.DEFAULT_OPTION , JOptionPane.PLAIN_MESSAGE , null , option , option[0] );

        if ( response==0) {

        } else
            if (response == 1) {
                //autenticate
            }else
                if (response == 2){
                    //ambos os 2
                }
                else {
                    //cancel
                }


        int chooserValue = chooser.showSaveDialog(this);
        if(chooserValue==JFileChooser.APPROVE_OPTION) {
            try {
                final int AES_KEYLENGTH = 128;
                byte[] iv = new byte[AES_KEYLENGTH / 8];	// Save the IV bytes or send it in plaintext with the encrypted data so you can decrypt the data later
                SecureRandom prng = new SecureRandom();
                prng.nextBytes(iv);

                KeyGenerator keyGen = KeyGenerator.getInstance("AES");
                keyGen.init(128);
                SecretKeySpec secretKey = (SecretKeySpec) keyGen.generateKey();



            //    PrintWriter fout = new PrintWriter(chooser.getSelectedFile());
                String txt = textArea.getText();


                ByteArrayInputStream stream = new ByteArrayInputStream(txt.getBytes(StandardCharsets.UTF_8));


                byte[] key_byte_array = Utility.objectToBytes(secretKey);
                FileOutputStream fos = new FileOutputStream(chooser.getCurrentDirectory() + "/keys.txt");
                assert(key_byte_array != null);
                fos.write(key_byte_array);
                System.out.println(key_byte_array.length);
                fos.write(iv);
                fos.close();
                byte[] ciphertext = cf.enc_CTR(stream, secretKey , iv);
                fos = new FileOutputStream(chooser.getSelectedFile());
                fos.write(ciphertext);
                fos.close();

                /*
                byte[] ciphertext = cf.enc_CTR(stream, secretKey , iv);
                PrintWriter writer = new PrintWriter(chooser.getCurrentDirectory() + "/keys.txt", "UTF-8");
                writer.print(new String(key_byte_array));
                writer.print(iv);
                writer.close();
                fout.print(ciphertext.toString());
                fout.close();

                   */
                statusField.setText("Saved " + chooser.getCurrentDirectory() + "key ---->" );
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (InvalidKeyException e) {
                e.printStackTrace();
            } catch (InvalidAlgorithmParameterException e) {
                e.printStackTrace();
            } catch (NoSuchPaddingException e) {
                e.printStackTrace();
            } catch (NoSuchProviderException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int chooserValue = chooser.showOpenDialog(this);
        BufferedReader br = null;

        if (chooserValue == JFileChooser.APPROVE_OPTION) {
            try {
                ByteArrayOutputStream ous = null;
                InputStream ios = null;
                try {
                    byte[] buffer = new byte[4096];
                    ous = new ByteArrayOutputStream();
                    ios = new FileInputStream(chooser.getCurrentDirectory() + "/keys.txt");
                    int read = 0;
                    while ((read = ios.read(buffer)) != -1) {
                        ous.write(buffer, 0, read);
                    }
                } finally {
                    try {
                        if (ous != null)
                            ous.close();
                    } catch (IOException e) {
                    }

                    try {
                        if (ios != null)
                            ios.close();
                    } catch (IOException e) {
                    }
                }
                byte[] bytes_from_file = ous.toByteArray();
                byte[] key_bytes = new byte[141];
                byte[] iv_bytes = new byte[16];
                System.arraycopy(bytes_from_file, 0, key_bytes, 0, 141);
                System.out.println("key_bytes" + key_bytes.length);
                SecretKeySpec key2 = (SecretKeySpec) Utility.bytesToObject(key_bytes);
                System.arraycopy(bytes_from_file, 141, iv_bytes, 0, 16);
                System.out.println(iv_bytes.length);

                //byte[] b = iv.getBytes(StandardCharsets.UTF_8); // Java 7+ only

                /*Scanner fin = new Scanner(chooser.getSelectedFile());
                String buffer = "";
                while (fin.hasNext()) {
                    buffer += fin.nextLine() + "\n";
                }*/

                ByteArrayOutputStream ous2 = null;
                InputStream ios2 = null;
                try {
                    ous2 = new ByteArrayOutputStream();
                    ios2 = new FileInputStream(chooser.getSelectedFile());
                    byte[] buffer = new byte[(int)chooser.getSelectedFile().length()];
                    int read = 0;
                    while ((read = ios2.read(buffer)) != -1) {
                        ous2.write(buffer, 0, read);
                    }

                    Chypher_Functions cf = new Chypher_Functions();

                    String s = cf.denc_CTR(buffer, key2, iv_bytes);
                    System.out.println(s);
                    textArea.setText(s);
                    statusField.setText("Load " + chooser.getSelectedFile().getAbsolutePath());
                } finally {
                    try {
                        if (ous2 != null)
                            ous2.close();
                    } catch (IOException e) {
                    }

                    try {
                        if (ios2 != null)
                            ios2.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "File not found!");
            } catch (IOException | NoSuchAlgorithmException | InvalidAlgorithmParameterException | InvalidKeyException | NoSuchProviderException | NoSuchPaddingException e) {
                e.printStackTrace();
            }

        }//GEN-LAST:event_loadButtonActionPerformed
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton newButton;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField statusField;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}